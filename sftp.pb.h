// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sftp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sftp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sftp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sftp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sftp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sftp_2eproto;
namespace sftp {
class CopyFromRemoteRequest;
class CopyFromRemoteRequestDefaultTypeInternal;
extern CopyFromRemoteRequestDefaultTypeInternal _CopyFromRemoteRequest_default_instance_;
class CopyFromRemoteResponse;
class CopyFromRemoteResponseDefaultTypeInternal;
extern CopyFromRemoteResponseDefaultTypeInternal _CopyFromRemoteResponse_default_instance_;
class CopyLocalToRemoteRequest;
class CopyLocalToRemoteRequestDefaultTypeInternal;
extern CopyLocalToRemoteRequestDefaultTypeInternal _CopyLocalToRemoteRequest_default_instance_;
class CopyLocalToRemoteResponse;
class CopyLocalToRemoteResponseDefaultTypeInternal;
extern CopyLocalToRemoteResponseDefaultTypeInternal _CopyLocalToRemoteResponse_default_instance_;
class Sftp;
class SftpDefaultTypeInternal;
extern SftpDefaultTypeInternal _Sftp_default_instance_;
}  // namespace sftp
PROTOBUF_NAMESPACE_OPEN
template<> ::sftp::CopyFromRemoteRequest* Arena::CreateMaybeMessage<::sftp::CopyFromRemoteRequest>(Arena*);
template<> ::sftp::CopyFromRemoteResponse* Arena::CreateMaybeMessage<::sftp::CopyFromRemoteResponse>(Arena*);
template<> ::sftp::CopyLocalToRemoteRequest* Arena::CreateMaybeMessage<::sftp::CopyLocalToRemoteRequest>(Arena*);
template<> ::sftp::CopyLocalToRemoteResponse* Arena::CreateMaybeMessage<::sftp::CopyLocalToRemoteResponse>(Arena*);
template<> ::sftp::Sftp* Arena::CreateMaybeMessage<::sftp::Sftp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sftp {

// ===================================================================

class Sftp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sftp.Sftp) */ {
 public:
  Sftp();
  virtual ~Sftp();

  Sftp(const Sftp& from);
  Sftp(Sftp&& from) noexcept
    : Sftp() {
    *this = ::std::move(from);
  }

  inline Sftp& operator=(const Sftp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sftp& operator=(Sftp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sftp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sftp* internal_default_instance() {
    return reinterpret_cast<const Sftp*>(
               &_Sftp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sftp& a, Sftp& b) {
    a.Swap(&b);
  }
  inline void Swap(Sftp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sftp* New() const final {
    return CreateMaybeMessage<Sftp>(nullptr);
  }

  Sftp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sftp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sftp& from);
  void MergeFrom(const Sftp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sftp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sftp.Sftp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sftp_2eproto);
    return ::descriptor_table_sftp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPassWordFieldNumber = 2,
    kSystemIdFieldNumber = 3,
    kHostKeyFieldNumber = 4,
    kFileNameFieldNumber = 5,
    kHostPortFieldNumber = 6,
    kClientKeyFieldNumber = 7,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string passWord = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string systemId = 3;
  void clear_systemid();
  const std::string& systemid() const;
  void set_systemid(const std::string& value);
  void set_systemid(std::string&& value);
  void set_systemid(const char* value);
  void set_systemid(const char* value, size_t size);
  std::string* mutable_systemid();
  std::string* release_systemid();
  void set_allocated_systemid(std::string* systemid);

  // string hostKey = 4;
  void clear_hostkey();
  const std::string& hostkey() const;
  void set_hostkey(const std::string& value);
  void set_hostkey(std::string&& value);
  void set_hostkey(const char* value);
  void set_hostkey(const char* value, size_t size);
  std::string* mutable_hostkey();
  std::string* release_hostkey();
  void set_allocated_hostkey(std::string* hostkey);

  // string fileName = 5;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // string hostPort = 6;
  void clear_hostport();
  const std::string& hostport() const;
  void set_hostport(const std::string& value);
  void set_hostport(std::string&& value);
  void set_hostport(const char* value);
  void set_hostport(const char* value, size_t size);
  std::string* mutable_hostport();
  std::string* release_hostport();
  void set_allocated_hostport(std::string* hostport);

  // string clientKey = 7;
  void clear_clientkey();
  const std::string& clientkey() const;
  void set_clientkey(const std::string& value);
  void set_clientkey(std::string&& value);
  void set_clientkey(const char* value);
  void set_clientkey(const char* value, size_t size);
  std::string* mutable_clientkey();
  std::string* release_clientkey();
  void set_allocated_clientkey(std::string* clientkey);

  // @@protoc_insertion_point(class_scope:sftp.Sftp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sftp_2eproto;
};
// -------------------------------------------------------------------

class CopyLocalToRemoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sftp.CopyLocalToRemoteRequest) */ {
 public:
  CopyLocalToRemoteRequest();
  virtual ~CopyLocalToRemoteRequest();

  CopyLocalToRemoteRequest(const CopyLocalToRemoteRequest& from);
  CopyLocalToRemoteRequest(CopyLocalToRemoteRequest&& from) noexcept
    : CopyLocalToRemoteRequest() {
    *this = ::std::move(from);
  }

  inline CopyLocalToRemoteRequest& operator=(const CopyLocalToRemoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyLocalToRemoteRequest& operator=(CopyLocalToRemoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyLocalToRemoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyLocalToRemoteRequest* internal_default_instance() {
    return reinterpret_cast<const CopyLocalToRemoteRequest*>(
               &_CopyLocalToRemoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CopyLocalToRemoteRequest& a, CopyLocalToRemoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyLocalToRemoteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyLocalToRemoteRequest* New() const final {
    return CreateMaybeMessage<CopyLocalToRemoteRequest>(nullptr);
  }

  CopyLocalToRemoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyLocalToRemoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CopyLocalToRemoteRequest& from);
  void MergeFrom(const CopyLocalToRemoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyLocalToRemoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sftp.CopyLocalToRemoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sftp_2eproto);
    return ::descriptor_table_sftp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSftpFieldNumber = 1,
  };
  // .sftp.Sftp sftp = 1;
  bool has_sftp() const;
  void clear_sftp();
  const ::sftp::Sftp& sftp() const;
  ::sftp::Sftp* release_sftp();
  ::sftp::Sftp* mutable_sftp();
  void set_allocated_sftp(::sftp::Sftp* sftp);

  // @@protoc_insertion_point(class_scope:sftp.CopyLocalToRemoteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sftp::Sftp* sftp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sftp_2eproto;
};
// -------------------------------------------------------------------

class CopyLocalToRemoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sftp.CopyLocalToRemoteResponse) */ {
 public:
  CopyLocalToRemoteResponse();
  virtual ~CopyLocalToRemoteResponse();

  CopyLocalToRemoteResponse(const CopyLocalToRemoteResponse& from);
  CopyLocalToRemoteResponse(CopyLocalToRemoteResponse&& from) noexcept
    : CopyLocalToRemoteResponse() {
    *this = ::std::move(from);
  }

  inline CopyLocalToRemoteResponse& operator=(const CopyLocalToRemoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyLocalToRemoteResponse& operator=(CopyLocalToRemoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyLocalToRemoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyLocalToRemoteResponse* internal_default_instance() {
    return reinterpret_cast<const CopyLocalToRemoteResponse*>(
               &_CopyLocalToRemoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CopyLocalToRemoteResponse& a, CopyLocalToRemoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyLocalToRemoteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyLocalToRemoteResponse* New() const final {
    return CreateMaybeMessage<CopyLocalToRemoteResponse>(nullptr);
  }

  CopyLocalToRemoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyLocalToRemoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CopyLocalToRemoteResponse& from);
  void MergeFrom(const CopyLocalToRemoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyLocalToRemoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sftp.CopyLocalToRemoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sftp_2eproto);
    return ::descriptor_table_sftp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // @@protoc_insertion_point(class_scope:sftp.CopyLocalToRemoteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sftp_2eproto;
};
// -------------------------------------------------------------------

class CopyFromRemoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sftp.CopyFromRemoteRequest) */ {
 public:
  CopyFromRemoteRequest();
  virtual ~CopyFromRemoteRequest();

  CopyFromRemoteRequest(const CopyFromRemoteRequest& from);
  CopyFromRemoteRequest(CopyFromRemoteRequest&& from) noexcept
    : CopyFromRemoteRequest() {
    *this = ::std::move(from);
  }

  inline CopyFromRemoteRequest& operator=(const CopyFromRemoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFromRemoteRequest& operator=(CopyFromRemoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyFromRemoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyFromRemoteRequest* internal_default_instance() {
    return reinterpret_cast<const CopyFromRemoteRequest*>(
               &_CopyFromRemoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CopyFromRemoteRequest& a, CopyFromRemoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFromRemoteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyFromRemoteRequest* New() const final {
    return CreateMaybeMessage<CopyFromRemoteRequest>(nullptr);
  }

  CopyFromRemoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyFromRemoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CopyFromRemoteRequest& from);
  void MergeFrom(const CopyFromRemoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyFromRemoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sftp.CopyFromRemoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sftp_2eproto);
    return ::descriptor_table_sftp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSftpFieldNumber = 1,
  };
  // .sftp.Sftp sftp = 1;
  bool has_sftp() const;
  void clear_sftp();
  const ::sftp::Sftp& sftp() const;
  ::sftp::Sftp* release_sftp();
  ::sftp::Sftp* mutable_sftp();
  void set_allocated_sftp(::sftp::Sftp* sftp);

  // @@protoc_insertion_point(class_scope:sftp.CopyFromRemoteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sftp::Sftp* sftp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sftp_2eproto;
};
// -------------------------------------------------------------------

class CopyFromRemoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sftp.CopyFromRemoteResponse) */ {
 public:
  CopyFromRemoteResponse();
  virtual ~CopyFromRemoteResponse();

  CopyFromRemoteResponse(const CopyFromRemoteResponse& from);
  CopyFromRemoteResponse(CopyFromRemoteResponse&& from) noexcept
    : CopyFromRemoteResponse() {
    *this = ::std::move(from);
  }

  inline CopyFromRemoteResponse& operator=(const CopyFromRemoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFromRemoteResponse& operator=(CopyFromRemoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyFromRemoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyFromRemoteResponse* internal_default_instance() {
    return reinterpret_cast<const CopyFromRemoteResponse*>(
               &_CopyFromRemoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CopyFromRemoteResponse& a, CopyFromRemoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFromRemoteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyFromRemoteResponse* New() const final {
    return CreateMaybeMessage<CopyFromRemoteResponse>(nullptr);
  }

  CopyFromRemoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyFromRemoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CopyFromRemoteResponse& from);
  void MergeFrom(const CopyFromRemoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyFromRemoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sftp.CopyFromRemoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sftp_2eproto);
    return ::descriptor_table_sftp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // @@protoc_insertion_point(class_scope:sftp.CopyFromRemoteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sftp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sftp

// string username = 1;
inline void Sftp::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::username() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.username)
  return username_.GetNoArena();
}
inline void Sftp::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.username)
}
inline void Sftp::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.username)
}
inline void Sftp::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.username)
}
inline void Sftp::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.username)
}
inline std::string* Sftp::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_username() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.username)
}

// string passWord = 2;
inline void Sftp::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::password() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.passWord)
  return password_.GetNoArena();
}
inline void Sftp::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.passWord)
}
inline void Sftp::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.passWord)
}
inline void Sftp::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.passWord)
}
inline void Sftp::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.passWord)
}
inline std::string* Sftp::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.passWord)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_password() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.passWord)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.passWord)
}

// string systemId = 3;
inline void Sftp::clear_systemid() {
  systemid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::systemid() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.systemId)
  return systemid_.GetNoArena();
}
inline void Sftp::set_systemid(const std::string& value) {
  
  systemid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.systemId)
}
inline void Sftp::set_systemid(std::string&& value) {
  
  systemid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.systemId)
}
inline void Sftp::set_systemid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.systemId)
}
inline void Sftp::set_systemid(const char* value, size_t size) {
  
  systemid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.systemId)
}
inline std::string* Sftp::mutable_systemid() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.systemId)
  return systemid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_systemid() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.systemId)
  
  return systemid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_systemid(std::string* systemid) {
  if (systemid != nullptr) {
    
  } else {
    
  }
  systemid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemid);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.systemId)
}

// string hostKey = 4;
inline void Sftp::clear_hostkey() {
  hostkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::hostkey() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.hostKey)
  return hostkey_.GetNoArena();
}
inline void Sftp::set_hostkey(const std::string& value) {
  
  hostkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.hostKey)
}
inline void Sftp::set_hostkey(std::string&& value) {
  
  hostkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.hostKey)
}
inline void Sftp::set_hostkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.hostKey)
}
inline void Sftp::set_hostkey(const char* value, size_t size) {
  
  hostkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.hostKey)
}
inline std::string* Sftp::mutable_hostkey() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.hostKey)
  return hostkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_hostkey() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.hostKey)
  
  return hostkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_hostkey(std::string* hostkey) {
  if (hostkey != nullptr) {
    
  } else {
    
  }
  hostkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostkey);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.hostKey)
}

// string fileName = 5;
inline void Sftp::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::filename() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.fileName)
  return filename_.GetNoArena();
}
inline void Sftp::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.fileName)
}
inline void Sftp::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.fileName)
}
inline void Sftp::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.fileName)
}
inline void Sftp::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.fileName)
}
inline std::string* Sftp::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.fileName)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_filename() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.fileName)
}

// string hostPort = 6;
inline void Sftp::clear_hostport() {
  hostport_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::hostport() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.hostPort)
  return hostport_.GetNoArena();
}
inline void Sftp::set_hostport(const std::string& value) {
  
  hostport_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.hostPort)
}
inline void Sftp::set_hostport(std::string&& value) {
  
  hostport_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.hostPort)
}
inline void Sftp::set_hostport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostport_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.hostPort)
}
inline void Sftp::set_hostport(const char* value, size_t size) {
  
  hostport_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.hostPort)
}
inline std::string* Sftp::mutable_hostport() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.hostPort)
  return hostport_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_hostport() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.hostPort)
  
  return hostport_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_hostport(std::string* hostport) {
  if (hostport != nullptr) {
    
  } else {
    
  }
  hostport_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostport);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.hostPort)
}

// string clientKey = 7;
inline void Sftp::clear_clientkey() {
  clientkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sftp::clientkey() const {
  // @@protoc_insertion_point(field_get:sftp.Sftp.clientKey)
  return clientkey_.GetNoArena();
}
inline void Sftp::set_clientkey(const std::string& value) {
  
  clientkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.Sftp.clientKey)
}
inline void Sftp::set_clientkey(std::string&& value) {
  
  clientkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.Sftp.clientKey)
}
inline void Sftp::set_clientkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.Sftp.clientKey)
}
inline void Sftp::set_clientkey(const char* value, size_t size) {
  
  clientkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.Sftp.clientKey)
}
inline std::string* Sftp::mutable_clientkey() {
  
  // @@protoc_insertion_point(field_mutable:sftp.Sftp.clientKey)
  return clientkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sftp::release_clientkey() {
  // @@protoc_insertion_point(field_release:sftp.Sftp.clientKey)
  
  return clientkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sftp::set_allocated_clientkey(std::string* clientkey) {
  if (clientkey != nullptr) {
    
  } else {
    
  }
  clientkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientkey);
  // @@protoc_insertion_point(field_set_allocated:sftp.Sftp.clientKey)
}

// -------------------------------------------------------------------

// CopyLocalToRemoteRequest

// .sftp.Sftp sftp = 1;
inline bool CopyLocalToRemoteRequest::has_sftp() const {
  return this != internal_default_instance() && sftp_ != nullptr;
}
inline void CopyLocalToRemoteRequest::clear_sftp() {
  if (GetArenaNoVirtual() == nullptr && sftp_ != nullptr) {
    delete sftp_;
  }
  sftp_ = nullptr;
}
inline const ::sftp::Sftp& CopyLocalToRemoteRequest::sftp() const {
  const ::sftp::Sftp* p = sftp_;
  // @@protoc_insertion_point(field_get:sftp.CopyLocalToRemoteRequest.sftp)
  return p != nullptr ? *p : *reinterpret_cast<const ::sftp::Sftp*>(
      &::sftp::_Sftp_default_instance_);
}
inline ::sftp::Sftp* CopyLocalToRemoteRequest::release_sftp() {
  // @@protoc_insertion_point(field_release:sftp.CopyLocalToRemoteRequest.sftp)
  
  ::sftp::Sftp* temp = sftp_;
  sftp_ = nullptr;
  return temp;
}
inline ::sftp::Sftp* CopyLocalToRemoteRequest::mutable_sftp() {
  
  if (sftp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sftp::Sftp>(GetArenaNoVirtual());
    sftp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sftp.CopyLocalToRemoteRequest.sftp)
  return sftp_;
}
inline void CopyLocalToRemoteRequest::set_allocated_sftp(::sftp::Sftp* sftp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sftp_;
  }
  if (sftp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sftp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sftp, submessage_arena);
    }
    
  } else {
    
  }
  sftp_ = sftp;
  // @@protoc_insertion_point(field_set_allocated:sftp.CopyLocalToRemoteRequest.sftp)
}

// -------------------------------------------------------------------

// CopyLocalToRemoteResponse

// string result = 1;
inline void CopyLocalToRemoteResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CopyLocalToRemoteResponse::result() const {
  // @@protoc_insertion_point(field_get:sftp.CopyLocalToRemoteResponse.result)
  return result_.GetNoArena();
}
inline void CopyLocalToRemoteResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.CopyLocalToRemoteResponse.result)
}
inline void CopyLocalToRemoteResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.CopyLocalToRemoteResponse.result)
}
inline void CopyLocalToRemoteResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.CopyLocalToRemoteResponse.result)
}
inline void CopyLocalToRemoteResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.CopyLocalToRemoteResponse.result)
}
inline std::string* CopyLocalToRemoteResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:sftp.CopyLocalToRemoteResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CopyLocalToRemoteResponse::release_result() {
  // @@protoc_insertion_point(field_release:sftp.CopyLocalToRemoteResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CopyLocalToRemoteResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:sftp.CopyLocalToRemoteResponse.result)
}

// -------------------------------------------------------------------

// CopyFromRemoteRequest

// .sftp.Sftp sftp = 1;
inline bool CopyFromRemoteRequest::has_sftp() const {
  return this != internal_default_instance() && sftp_ != nullptr;
}
inline void CopyFromRemoteRequest::clear_sftp() {
  if (GetArenaNoVirtual() == nullptr && sftp_ != nullptr) {
    delete sftp_;
  }
  sftp_ = nullptr;
}
inline const ::sftp::Sftp& CopyFromRemoteRequest::sftp() const {
  const ::sftp::Sftp* p = sftp_;
  // @@protoc_insertion_point(field_get:sftp.CopyFromRemoteRequest.sftp)
  return p != nullptr ? *p : *reinterpret_cast<const ::sftp::Sftp*>(
      &::sftp::_Sftp_default_instance_);
}
inline ::sftp::Sftp* CopyFromRemoteRequest::release_sftp() {
  // @@protoc_insertion_point(field_release:sftp.CopyFromRemoteRequest.sftp)
  
  ::sftp::Sftp* temp = sftp_;
  sftp_ = nullptr;
  return temp;
}
inline ::sftp::Sftp* CopyFromRemoteRequest::mutable_sftp() {
  
  if (sftp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sftp::Sftp>(GetArenaNoVirtual());
    sftp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sftp.CopyFromRemoteRequest.sftp)
  return sftp_;
}
inline void CopyFromRemoteRequest::set_allocated_sftp(::sftp::Sftp* sftp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sftp_;
  }
  if (sftp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sftp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sftp, submessage_arena);
    }
    
  } else {
    
  }
  sftp_ = sftp;
  // @@protoc_insertion_point(field_set_allocated:sftp.CopyFromRemoteRequest.sftp)
}

// -------------------------------------------------------------------

// CopyFromRemoteResponse

// string result = 1;
inline void CopyFromRemoteResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CopyFromRemoteResponse::result() const {
  // @@protoc_insertion_point(field_get:sftp.CopyFromRemoteResponse.result)
  return result_.GetNoArena();
}
inline void CopyFromRemoteResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sftp.CopyFromRemoteResponse.result)
}
inline void CopyFromRemoteResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sftp.CopyFromRemoteResponse.result)
}
inline void CopyFromRemoteResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sftp.CopyFromRemoteResponse.result)
}
inline void CopyFromRemoteResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sftp.CopyFromRemoteResponse.result)
}
inline std::string* CopyFromRemoteResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:sftp.CopyFromRemoteResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CopyFromRemoteResponse::release_result() {
  // @@protoc_insertion_point(field_release:sftp.CopyFromRemoteResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CopyFromRemoteResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:sftp.CopyFromRemoteResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sftp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sftp_2eproto
